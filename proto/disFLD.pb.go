// Code generated by protoc-gen-go. DO NOT EDIT.
// source: disFLD.proto

package disFLD

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HeartBeat struct {
	From                 string   `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To                   string   `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	Request              bool     `protobuf:"varint,3,opt,name=Request,proto3" json:"Request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartBeat) Reset()         { *m = HeartBeat{} }
func (m *HeartBeat) String() string { return proto.CompactTextString(m) }
func (*HeartBeat) ProtoMessage()    {}
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_7366714a2fa62dee, []int{0}
}

func (m *HeartBeat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartBeat.Unmarshal(m, b)
}
func (m *HeartBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartBeat.Marshal(b, m, deterministic)
}
func (m *HeartBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeat.Merge(m, src)
}
func (m *HeartBeat) XXX_Size() int {
	return xxx_messageInfo_HeartBeat.Size(m)
}
func (m *HeartBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeat.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeat proto.InternalMessageInfo

func (m *HeartBeat) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *HeartBeat) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *HeartBeat) GetRequest() bool {
	if m != nil {
		return m.Request
	}
	return false
}

type Node struct {
	NodeID               string   `protobuf:"bytes,1,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	IP                   string   `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
	Port                 string   `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_7366714a2fa62dee, []int{1}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *Node) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *Node) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type NodeList struct {
	NodeID               []*Node  `protobuf:"bytes,1,rep,name=NodeID,proto3" json:"NodeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeList) Reset()         { *m = NodeList{} }
func (m *NodeList) String() string { return proto.CompactTextString(m) }
func (*NodeList) ProtoMessage()    {}
func (*NodeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_7366714a2fa62dee, []int{2}
}

func (m *NodeList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeList.Unmarshal(m, b)
}
func (m *NodeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeList.Marshal(b, m, deterministic)
}
func (m *NodeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeList.Merge(m, src)
}
func (m *NodeList) XXX_Size() int {
	return xxx_messageInfo_NodeList.Size(m)
}
func (m *NodeList) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeList.DiscardUnknown(m)
}

var xxx_messageInfo_NodeList proto.InternalMessageInfo

func (m *NodeList) GetNodeID() []*Node {
	if m != nil {
		return m.NodeID
	}
	return nil
}

func init() {
	proto.RegisterType((*HeartBeat)(nil), "HeartBeat")
	proto.RegisterType((*Node)(nil), "Node")
	proto.RegisterType((*NodeList)(nil), "NodeList")
}

func init() { proto.RegisterFile("disFLD.proto", fileDescriptor_7366714a2fa62dee) }

var fileDescriptor_7366714a2fa62dee = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x49, 0x5a, 0x63, 0x32, 0x8a, 0xc8, 0x1c, 0x24, 0x14, 0x84, 0x12, 0x7a, 0x88, 0x97,
	0x1c, 0xea, 0x3f, 0x08, 0xb1, 0x34, 0x50, 0x4a, 0x59, 0x7a, 0xf2, 0x64, 0x6a, 0x06, 0x5d, 0x44,
	0xa7, 0xee, 0x4e, 0xd1, 0x9f, 0x5f, 0x76, 0xd3, 0x2d, 0x3d, 0xed, 0x7b, 0xbb, 0x8f, 0xef, 0xb1,
	0x0f, 0x6e, 0x7b, 0x6d, 0x17, 0xab, 0xa6, 0xda, 0x1b, 0x16, 0x2e, 0x5a, 0xc8, 0x96, 0xd4, 0x19,
	0xa9, 0xa9, 0x13, 0x44, 0x18, 0x2f, 0x0c, 0x7f, 0xe7, 0xd1, 0x34, 0x2a, 0x33, 0xe5, 0x35, 0xde,
	0x41, 0xbc, 0xe5, 0x3c, 0xf6, 0x37, 0xf1, 0x96, 0x31, 0x87, 0x6b, 0x45, 0xbf, 0x07, 0xb2, 0x92,
	0x8f, 0xa6, 0x51, 0x99, 0xaa, 0x60, 0x8b, 0x1a, 0xc6, 0x6b, 0xee, 0x09, 0x1f, 0x20, 0x71, 0x67,
	0xdb, 0x9c, 0x38, 0x27, 0xe7, 0x48, 0xed, 0x26, 0x90, 0xda, 0x8d, 0x6b, 0xdb, 0xb3, 0x19, 0x30,
	0x99, 0xf2, 0xba, 0x78, 0x82, 0xd4, 0xa5, 0x57, 0xda, 0x0a, 0x3e, 0x5e, 0x70, 0x46, 0xe5, 0xcd,
	0xfc, 0xaa, 0x72, 0x36, 0xe0, 0xe6, 0x6f, 0x80, 0x8d, 0xb6, 0x62, 0xf4, 0xee, 0x20, 0xd4, 0xaf,
	0x49, 0xfe, 0xd8, 0x7c, 0xe1, 0x0c, 0x60, 0x59, 0xbf, 0xfc, 0xbf, 0x7f, 0x76, 0x3f, 0x1f, 0x84,
	0x50, 0x9d, 0x3f, 0x37, 0xb9, 0xd0, 0x38, 0x83, 0xfb, 0x50, 0x73, 0xce, 0x0e, 0xf8, 0x49, 0x56,
	0x85, 0x97, 0x3a, 0x7d, 0x4d, 0x86, 0xad, 0x76, 0x89, 0x1f, 0xeb, 0xf9, 0x18, 0x00, 0x00, 0xff,
	0xff, 0x56, 0xe4, 0x01, 0xd0, 0x3c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DistributedNetworkClient is the client API for DistributedNetwork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DistributedNetworkClient interface {
	HBExchange(ctx context.Context, in *HeartBeat, opts ...grpc.CallOption) (*HeartBeat, error)
	NodeListExchange(ctx context.Context, in *Node, opts ...grpc.CallOption) (*NodeList, error)
}

type distributedNetworkClient struct {
	cc *grpc.ClientConn
}

func NewDistributedNetworkClient(cc *grpc.ClientConn) DistributedNetworkClient {
	return &distributedNetworkClient{cc}
}

func (c *distributedNetworkClient) HBExchange(ctx context.Context, in *HeartBeat, opts ...grpc.CallOption) (*HeartBeat, error) {
	out := new(HeartBeat)
	err := c.cc.Invoke(ctx, "/DistributedNetwork/HBExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedNetworkClient) NodeListExchange(ctx context.Context, in *Node, opts ...grpc.CallOption) (*NodeList, error) {
	out := new(NodeList)
	err := c.cc.Invoke(ctx, "/DistributedNetwork/NodeListExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributedNetworkServer is the server API for DistributedNetwork service.
type DistributedNetworkServer interface {
	HBExchange(context.Context, *HeartBeat) (*HeartBeat, error)
	NodeListExchange(context.Context, *Node) (*NodeList, error)
}

// UnimplementedDistributedNetworkServer can be embedded to have forward compatible implementations.
type UnimplementedDistributedNetworkServer struct {
}

func (*UnimplementedDistributedNetworkServer) HBExchange(ctx context.Context, req *HeartBeat) (*HeartBeat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HBExchange not implemented")
}
func (*UnimplementedDistributedNetworkServer) NodeListExchange(ctx context.Context, req *Node) (*NodeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeListExchange not implemented")
}

func RegisterDistributedNetworkServer(s *grpc.Server, srv DistributedNetworkServer) {
	s.RegisterService(&_DistributedNetwork_serviceDesc, srv)
}

func _DistributedNetwork_HBExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedNetworkServer).HBExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DistributedNetwork/HBExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedNetworkServer).HBExchange(ctx, req.(*HeartBeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedNetwork_NodeListExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedNetworkServer).NodeListExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DistributedNetwork/NodeListExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedNetworkServer).NodeListExchange(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

var _DistributedNetwork_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DistributedNetwork",
	HandlerType: (*DistributedNetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HBExchange",
			Handler:    _DistributedNetwork_HBExchange_Handler,
		},
		{
			MethodName: "NodeListExchange",
			Handler:    _DistributedNetwork_NodeListExchange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "disFLD.proto",
}
